# Set some variables that we will use throughout this demo
SUBSCRIPTION="b33f0285-db27-4896-ac5c-df22004b0aba" # Microsoft Azure Sponsorship Rainer
LOCATION="westeurope"
RG="PrivateEndpointDemo"
APPSERVPLAN="PedPlan"
STORAGE="pedappstorage"
APPCONTAINER="apps"
APPBLOB=https://$STORAGE.blob.core.windows.net/$APPCONTAINER/BackendService.zip
APPBLOBFRONTEND=https://$STORAGE.blob.core.windows.net/$APPCONTAINER/pedfrontend.zip
PRIVATEWEBAPP="PedWebPrivate"
PUBLICWEBAPP="PedWebPublic"
WEBDNSLINK="PedWebDnsLink"
VNET="PedVnet"
AI_APP_NAME="PrivateEndpointDemoAI"
SUBNET_DB="DatabaseSubnet"
SUBNET_BACKEND="BackendSubnet"
ENDPOINT="PedWebPrivateEndpoint"
INTERACTIVE_IMAGE="rstropek/ped-interactive"
INTERACTIVE_CONT="pedaciinteractive"
SQLSERVER="pedsqlserver"
SQLDB="PedSqlDb"
SQLENDPOINT="PedSqlPrivateEndpoint"
SQLDNSLINK="PedSqlDnsLink"
FRONTEND_URL="https://cddataexchange.blob.core.windows.net/data-exchange/Frontend.zip"


########################################################################################################################
# Log in (not necessary in cloud shell) and select correct account
az login --use-device-code
az account set --subscription "$SUBSCRIPTION"


########################################################################################################################
# Create resource groups
if [[ $(az group exists --name $RG) == false* ]]
then
    az group create --name $RG --location "$LOCATION"
fi


########################################################################################################################
# Create storage with container
if ! az storage account show --resource-group $RG --name $STORAGE 2> /dev/null
then
    az storage account create --name $STORAGE --resource-group $RG --location $LOCATION --kind StorageV2 --sku Standard_LRS --default-action Allow
fi

if [[ $(az storage container exists --account-name $STORAGE --name $APPCONTAINER --query exists -o tsv) == false* ]]
then
    az storage container create --account-name $STORAGE --name $APPCONTAINER
fi

END=`date -u -d "90 days" '+%Y-%m-%dT%H:%MZ'`
SAS=`az storage container generate-sas --account-name $STORAGE --name $APPCONTAINER --https-only --permissions r --expiry $END -o tsv`


########################################################################################################################
# Create app service plans (one for Linux and one for Windows)
# Note Premium V2 plan, necessary for private endpoints
if output=$(az appservice plan show --resource-group "$RG" --name "$APPSERVPLAN") && [ -z "$output" ]
then
    az appservice plan create --name $APPSERVPLAN --resource-group $RG \
        --location "$LOCATION" --sku P1V2 --number-of-workers 1
fi


########################################################################################################################
# Deploy network and subnets
if ! az network vnet show --name $VNET --resource-group $RG 2> /dev/null
then
    # Network with subnet for private endpoints
    az network vnet create --name $VNET --resource-group $RG --location "$LOCATION" \
        --address-prefixes 10.0.0.0/16 --subnet-name $SUBNET_DB --subnet-prefixes 10.0.0.0/24

    # We have to disable private endpoint network policies as network security groups (NSGs)
    # are not supported for private endpoints. For details see also
    # https://docs.microsoft.com/en-us/azure/private-link/disable-private-endpoint-network-policy
    az network vnet subnet update --name $SUBNET_DB --resource-group $RG --vnet-name $VNET \
        --disable-private-endpoint-network-policies true

    az network vnet subnet create --vnet-name $VNET --name $SUBNET_BACKEND --resource-group $RG \
        --address-prefixes 10.0.1.0/24
    
    az network vnet subnet update --vnet-name $VNET --name $SUBNET_BACKEND --resource-group $RG \
        --disable-private-endpoint-network-policies true
fi


########################################################################################################################
# Deploy backend API
if ! az webapp show --resource-group $RG --name $PRIVATEWEBAPP 2> /dev/null
then
    az webapp create --resource-group $RG --plan $APPSERVPLAN --name $PRIVATEWEBAPP
fi
PRIVATEWEBAPP_ID=$(az webapp show --name $PRIVATEWEBAPP --resource-group $RG --query "id" -o tsv)

az webapp config appsettings set --name $PRIVATEWEBAPP --resource-group $RG --settings WEBSITE_RUN_FROM_PACKAGE="$APPBLOB?$SAS"

# Create private endpoint for backend API
if ! az network private-endpoint show --resource-group $RG --name $ENDPOINT 2> /dev/null
then
    az network private-endpoint create --resource-group $RG --name $ENDPOINT --vnet-name $VNET --subnet $SUBNET_DB \
        --private-connection-resource-id "$PRIVATEWEBAPP_ID" --connection-name "$ENDPOINT-connection" --location "$LOCATION" \
        --group-ids sites
fi
PEP_NIC_IPCONFIG=$(az network private-endpoint show --resource-group $RG --name $ENDPOINT --query "networkInterfaces[0].id" -o tsv)/ipConfigurations/sites-sites.privateEndpoint
az network nic ip-config show --ids $PEP_NIC_IPCONFIG --query "privateLinkConnectionProperties.fqdns" -o tsv
PEP_IP=$(az network nic ip-config show --ids $PEP_NIC_IPCONFIG --query "privateIpAddress" -o tsv)
echo "$PEP_IP"


########################################################################################################################
# DEMO accessing backend API
# Try accessing api over public internet
curl http://$PRIVATEWEBAPP.azurewebsites.net



########################################################################################################################
# Deploy private DNS zone for Web API resolution
if ! az network private-dns zone show --resource-group $RG --name  "privatelink.azurewebsites.net" 2> /dev/null
then
    az network private-dns zone create --resource-group $RG --name  "privatelink.azurewebsites.net"
fi
if ! az network private-dns link vnet show --resource-group $RG --zone-name  "privatelink.azurewebsites.net" --name $WEBDNSLINK 2> /dev/null
then
    # Add private DNS link to existing VNet
    az network private-dns link vnet create --resource-group $RG --zone-name  "privatelink.azurewebsites.net" \
        --name $WEBDNSLINK --virtual-network $VNET --registration-enabled false 
    az network private-dns record-set a create --name $PRIVATEWEBAPP --zone-name privatelink.azurewebsites.net --resource-group $RG
    az network private-dns record-set a add-record --record-set-name $PRIVATEWEBAPP --zone-name privatelink.azurewebsites.net \
        --resource-group $RG -a $PEP_IP
fi


########################################################################################################################
# Deploy Azure SQL DB
if ! az sql server show --name $SQLSERVER --resource-group $RG 2> /dev/null
then
    # Note that we disallow access from public network
    az sql server create --name $SQLSERVER --resource-group $RG --location "$LOCATION" \
        --admin-user "sqladmin" --admin-password "Passw0rd1234" --enable-public-network false

    # Proxy is needed for private endpoint. For details see
    # https://docs.microsoft.com/en-us/azure/sql-database/sql-database-private-endpoint-overview#limitations
    az sql server conn-policy update --connection-type Proxy --resource-group $RG --server $SQLSERVER
    
    # az sql server firewall-rule create --resource-group $RG --server $SQLSERVER --name everyone \
    #    --start-ip-address 10.0.0.0 --end-ip-address 10.0.255.255
fi
SQLSERVER_ID=$(az sql server show --name $SQLSERVER --resource-group $RG --query "id" -o tsv)

if ! az sql db show --resource-group $RG --server $SQLSERVER --name $SQLDB 2> /dev/null
then
    az sql db create --resource-group $RG --server $SQLSERVER --name $SQLDB
fi

az webapp config appsettings set --name $PRIVATEWEBAPP --resource-group $RG --settings ConnectionString="Server=tcp:$SQLSERVER.database.windows.net,1433;Initial Catalog=PedSqlDb;Persist Security Info=False;User ID=sqladmin;Password=Passw0rd1234;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" \
    WEBSITE_VNET_ROUTE_ALL="1" WEBSITE_DNS_SERVER="168.63.129.16"


# Demonstrate that accessing SQL DB over the internet is not possible


########################################################################################################################
# Deploy private endpoint for SQL DB
if ! az network private-endpoint show --resource-group $RG --name $SQLENDPOINT 2> /dev/null
then
    az network private-endpoint create --name $SQLENDPOINT --resource-group $RG \
        --vnet-name $VNET --subnet $SUBNET_DB --private-connection-resource-id "$SQLSERVER_ID" \
        --group-ids sqlServer --connection-name "$SQLENDPOINT-connection"
fi
SQLPEP_NIC_IPCONFIG=$(az network private-endpoint show --resource-group $RG --name $SQLENDPOINT --query "networkInterfaces[0].id" -o tsv)
az resource show --ids $SQLPEP_NIC_IPCONFIG --query "properties.ipConfigurations[0].properties.privateLinkConnectionProperties.fqdns"
SQLPEP_IP=$(az resource show --ids $SQLPEP_NIC_IPCONFIG --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
echo $SQLPEP_IP


########################################################################################################################
# Deploy private DNS zone for SQL name resolution
if ! az network private-dns zone show --resource-group $RG --name  "privatelink.database.windows.net" 2> /dev/null
then
    az network private-dns zone create --resource-group $RG --name  "privatelink.database.windows.net"
fi
if ! az network private-dns link vnet show --resource-group $RG --zone-name  "privatelink.database.windows.net" --name $SQLDNSLINK 2> /dev/null
then
    # Add private DNS link to existing VNet
    az network private-dns link vnet create --resource-group $RG --zone-name  "privatelink.database.windows.net" \
        --name $SQLDNSLINK --virtual-network $VNET --registration-enabled false 
    az network private-dns record-set a create --name $SQLSERVER --zone-name privatelink.database.windows.net --resource-group $RG
    az network private-dns record-set a add-record --record-set-name $SQLSERVER --zone-name privatelink.database.windows.net \
        --resource-group $RG -a $SQLPEP_IP
fi


########################################################################################################################
# Deploy public webapp
if ! az webapp show --resource-group $RG --name $PUBLICWEBAPP 2> /dev/null
then
    az webapp create --resource-group $RG --plan $APPSERVPLAN --name $PUBLICWEBAPP
fi
PRIVATEWEBAPP_ID=$(az webapp show --name $PUBLICWEBAPP --resource-group $RG --query "id" -o tsv)

az webapp config appsettings set --name $PUBLICWEBAPP --resource-group $RG --settings WEBSITE_RUN_FROM_PACKAGE="$APPBLOBFRONTEND?$SAS" BackendUri="https://$PRIVATEWEBAPP.azurewebsites.net/api/Database" \
    WEBSITE_VNET_ROUTE_ALL="1" WEBSITE_DNS_SERVER="168.63.129.16"

########################################################################################################################
# Helper scripts
az resource list --resource-group $RG --output table
az resource list --resource-group $RGW --output table
